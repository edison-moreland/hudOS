#!/bin/bash
set -euo pipefail
source "${HUD_DATA_DIR}/logging.sh"
source "${HUD_DATA_DIR}/json.sh"

APP_NAME="$1"
source <(hudctl-appenv "${APP_NAME}")
query_file_array "${APP_MANIFEST_PATH}" APP_BINARIES '.binaries // [] | .[]'
query_file_array "${APP_MANIFEST_PATH}" APP_UNITS '.units // [] | .[]'
query_file_array "${APP_MANIFEST_PATH}" APP_CONFIGS '.configs // [] | .[]'
query_file_array "${APP_MANIFEST_PATH}" APP_SCRIPTS '.scripts // [] | .[]'
query_file_array "${APP_MANIFEST_PATH}" APP_DATA '.data // [] | .[]'

if [ "$(hudctl-catalog "${APP_NAME}" get enabled)" == "true" ]; then
    log_yellow "App is already enabled, reenabling"
fi

function link_app_file() {
    FILENAME=$1
    DESTINATION_DIR=$2

    FULL_PATH="${APP_ROOT}/${FILENAME}"
    DEST_PATH="${DESTINATION_DIR}/$(basename "${FULL_PATH}")"

    log_blue "Link ${DEST_PATH} -> ${FULL_PATH}"
    ln -sf "${FULL_PATH}" "${DEST_PATH}"
    chown -h "${HUD_USER}:${HUD_USER}" "${DEST_PATH}"
}

# First step, link all app files
for binary in "${APP_BINARIES[@]}"; do
    link_app_file "binaries/${binary}" "${HUD_BIN_DIR}"
done

for unit in "${APP_UNITS[@]}"; do
    link_app_file "units/${unit}" "${HUD_UNIT_DIR}"
done

for config in "${APP_CONFIGS[@]}"; do
    link_app_file "configs/${config}" "${HUD_CONFIG_DIR}"
done

for data in "${APP_DATA[@]}"; do
    link_app_file "data/${data}" "${HUD_DATA_DIR}"
done

# Second step, enable units
if (( ${#APP_UNITS[@]} != 0 )); then
    systemctl daemon-reload
    for unit in "${APP_UNITS[@]}"; do
        systemctl enable "${unit}"
    done
fi

# Third step, run any scripts
for script in "${APP_SCRIPTS[@]}"; do
    SCRIPT_PATH="${APP_ROOT}/scripts/${script}"
	
    echo "- $(basename "${SCRIPT_PATH}")"
	if bash "${SCRIPT_PATH}"; then
		echo "Success!"
	else
		echo "Failure :("
		exit 1
	fi
done

# Final step, set state to linked
hudctl-catalog "${APP_NAME}" set enabled true